<?php
App::uses('Component', 'Controller/Component');

/**
 * @author Nguyen Duy Linh
 * Component process Subroutine
 */
class SubroutineComponent extends Component{
	/**
	 * SUBROUTINE GASCOM 
	 *
	 */
	public function GASCOM(&$XD, &$X, &$Ff, &$Tf1, &$Fa, &$Ta1, &$FaO2D, &$Hl, &$A0D, &$A0, &$G0, &$G0D, &$FCO2, &$FH2O, &$FN2){
		// real,dimension(20)::XD
		// real,dimension(20)::X
		// real,dimension(18,5)::$GK
		$GK[1][1]=0.5;$GK[2][1]=0.5;$GK[3][1]=2.0;$GK[4][1]=3.5;$GK[5][1]=5.0;$GK[6][1]=6.5;$GK[7][1]=6.5;$GK[8][1]=2.5;$GK[9][1]=4.5;
		$GK[10][1]=6.0;$GK[11][1]=6.0;$GK[12][1]=6.0;$GK[13][1]=2.5;$GK[14][1]=-1.0;$GK[15][1]=-0.209;$GK[16][1]=0.0;$GK[17][1]=0.0;$GK[18][1]=0.0;
		//!
		$GK[1][2]=0.0;$GK[2][2]=1.0;$GK[3][2]=1.0;$GK[4][2]=2.0;$GK[5][2]=3.0;$GK[6][2]=4.0;$GK[7][2]=4.0;$GK[8][2]=2.0;$GK[9][2]=3.0;
		$GK[10][2]=4.0;$GK[11][2]=4.0;$GK[12][2]=4.0;$GK[13][2]=1.0;$GK[14][2]=0.0;$GK[15][2]=0.0;$GK[16][2]=0.0;$GK[17][2]=1.;$GK[18][2]=0.0;
		//!
		$GK[1][3]=1.0;$GK[2][3]=0.0;$GK[3][3]=2.0;$GK[4][3]=3.0;$GK[5][3]=4.0;$GK[6][3]=5.0;$GK[7][3]=5.0;$GK[8][3]=2.0;$GK[9][3]=3.0;
		$GK[10][3]=4.0;$GK[11][3]=4.0;$GK[12][3]=4.0;$GK[13][3]=1.0;$GK[14][3]=0.0;$GK[15][3]=0.0;$GK[16][3]=0.0;$GK[17][3]=1.0;$GK[18][3]=0.0;
		//!
		$GK[1][4]=0.0;$GK[2][4]=0.0;$GK[3][4]=0.0;$GK[4][4]=0.0;$GK[5][4]=0.0;$GK[6][4]=0.0;$GK[7][4]=0.0;$GK[8][4]=0.0;$GK[9][4]=0.0;
		$GK[10][4]=0.0;$GK[11][4]=0.0;$GK[12][4]=0.0;$GK[13][4]=0.0;$GK[14][4]=0.0;$GK[15][4]=0.791;$GK[16][4]=1.0;$GK[17][4]=0.0;$GK[18][4]=0.0;
		//!
		$GK[1][5]=10.78;$GK[2][5]=12.62;$GK[3][5]=35.82;$GK[4][5]=63.76;$GK[5][5]=91.18;$GK[6][5]=118.61;$GK[7][5]=118.18;$GK[8][5]=59.04;$GK[9][5]=85.94;
		$GK[10][5]=113.18;$GK[11][5]=113.08;$GK[12][5]=112.91;$GK[13][5]=56.07;$GK[14][5]=0.0;$GK[15][5]=0.0;$GK[16][5]=0.0;$GK[17][5]=0.0;$GK[18][5]=0.0;
		//!

		//!  ガスの燃焼計算
		//!　入力データ：XD(18),　Ff,　Tf1,Fa,Ta1,$GK(5,18)
		//!　出力データ：X(18) ,　Hl,　 A0d,A0,　G0,　G0d,　FCO2　,FH2O,　FN2,FaN2,FaO2,FaH2O

		//!　XD(i)は　xdjのことで,ドライベース,％で入力されたガス組成割合
		//!　X(i)はウエットベースの,ガスの体積分率
		//!　φはFに読み替える。
		//!　Ffは　φfで燃料中の相対湿度(％)
		//!　Faは　φaで空気中の相対湿度(％)
		//!　Tf1は予熱前燃料温度
		//!　Ta1は予熱前空気温度
		//!　Pｋ(I,j)は,燃焼計算用係数
		//!　Pfは大気圧で101.325　kPa
		//!　Psfは飽和蒸気圧　MPa
		//!　Psf=10^(-0.000000000543131*Ｔ^4+0.000000360475263*Ｔ^3-0.00012264315679*Ｔ^2+0.031390372490756*Ｔ-2.2047366048003)
		//!　FfH20:　燃料中の水蒸気分圧
		//!　FaH2o:　燃焼用空気中の水蒸気分圧
		//!　FaO2d：　ドライベースの空気中酸素濃度　
		//!　FaO2 ：   燃焼用空気中の酸素濃度(分圧)WET
		//!　FaN2 ：   燃焼用空気中の窒素濃度(分圧)WET

		//!　Gｋ(i,　j)：燃焼計算用係数

		//!　total：加算用パラメータ
		//!　 HL：燃料発熱量
		//!　 A0d ：ドライベースの理論空気量
		//!　 A0 ：理論空気量

		//!　 G0 ：理論湿り排ガス量
		//!　 G0D：理論乾き排ガス量
		//!　 FCO2 ：CO2生成量
		//!　 FH2O ：H2O生成量
		//!　F N2 ：N2生成量
		//!　 T：温度

		//!　燃料及び燃焼用空気中の水分分圧の計算
		//!　燃料
		$T = $Tf1;
		$pow4 = -0.000000000543131 * pow($T, 4);
		$pow3 = 0.000000360475263 * pow($T, 3);
		$pow2 = 0.00012264315679 * pow($T, 2);
		$pow1 = 0.031390372490756 * $T;

		$Psf = pow(10, $pow4 + $pow3 - $pow2 + $pow1 - 2.2047366048003);

		$Psf = $Psf*1000.0;     //!KPaに変換
		$Pf = 101.325;       //!kPa
		$FfH20 = $Ff * $Psf/(100 * $Pf);   //!分圧
		//!燃焼用空気
		$T = $Ta1;
		$pow4 = -0.000000000543131 * pow($T, 4);
		$pow3 = 0.000000360475263 * pow($T, 3);
		$pow2 = 0.00012264315679 * pow($T, 2);
		$pow1 = 0.031390372490756 * $T;

		$Psf = pow(10, $pow4 + $pow3 - $pow2 + $pow1 - 2.2047366048003);
		$Psf = $Psf*1000;    //!KPaに変換
		$Pf = 101.325;      //!kPa
		$FaH2O = $Fa * $Psf/(100 * $Pf);  //!分圧

		//!　XD(1)：H2,　
		//!　　XD(2)：CO
		//!　　XD(3)：CH4
		//!　　XD(4)：C2H6
		//!　　XD(5)：C3H8
		//!　　XD(6)：n-C4H10
		//!　　XD(7)：i- C4H10
		//!　　XD(8)：C2Ｈ４
		//!　　XD(9)：Ｃ３Ｈ６
		//!　　XD(10)：Ｃ4Ｈ8
		//!　　XD(11)：Ｃ4Ｈ8
		//!　　XD(12)：Ｃ4Ｈ8
		//!　　XD(13)：Ｃ2Ｈ2
		//!　　XD(14)：Ｏ２
		//!　　XD(15)：AIR(dry)
		//!　　XD(16)：N2
		//!　　XD(17)：CO２
		//!　　X(18)：H2O
		//!　ドライ,％の入力からウエット　分率への変換
		$X[18]= $FfH20;
		
		// DO I=1,17
		// X(i)=XD(i)/100/(1+X(18))
		// end DO
		for($i=1 ; $i<=17 ; $i++){
			$X[$i] = 0;
			if((1 + $X[18])!=0){
				$X[$i] = ($XD[$i]/100)/(1 + $X[18]);
			}
		}

		$AA = 0.0;
		$BB = 0.0;
		$CC = 0.0;
		$DD = 0.0;
		$EE = 0.0;

		for($i=1 ; $i<=18 ; $i++){
			$AA = $AA + $X[$i] * $GK[$i][1];        //!必要酸素量
			$BB = $BB + $X[$i] * $GK[$i][2];        //!発生CO2　燃料起因
			$CC = $CC + $X[$i] * $GK[$i][3];       //!発生H2O　燃料起因
			$DD = $DD + $X[$i] * $GK[$i][4];       //!発生N2　　燃料起因
			$EE = $EE + $X[$i] * $GK[$i][5];       //!発熱量
		}		
		//! 　FaO2d 燃焼用空気中のドライベースの酸素濃度(％)
		//!　乾き理論空気量計算
		$FaO2D = $FaO2D/100.0;
		$FaO2 = 0.0;
		if((1 + $FaH2O)!=0){
			$FaO2 = $FaO2D/(1 + $FaH2O);
		}

		$FaN2 = 1.0 - $FaO2 - $FaH2O;

		// $A0D = 0.0;
		if($FaO2D != 0.0){
			$A0D = $AA / $FaO2D;
		}

		$A0 = 0.0;
		if((1 - $FaH2O)!=0){		
			$A0 = $A0D/(1 - $FaH2O);
		}
		//!　N2発生量
		$FN2 = $DD + $A0D * (1 - $FaO2);
		//!　　
		$FCO2 = $BB;
		$FH2O = $CC + $A0 * $FaH2O;		
		$Hl = $EE;		
		$G0 = $FCO2 + $FH2O + $FN2;
		$G0D = $FCO2 + $FN2;
	} /* END SUBROUTINE GASCOM */

	/**
	 * SUBROUTINE OILCOM
	 */
	public function OILCOM(&$POD, &$PO, &$Ff, &$Ta1, &$FaO2D, &$Hh, &$Hl, &$A0D, &$A0, &$G0, &$G0D, &$FCO2, &$FH2O, &$FN2, &$FSO2, &$FaN2, &$FaO2, &$FaH2O){
		// real,dimension(5)::POd
		// real,dimension(5)::P
		// real,dimension(5,5)::OK
		$OK[1][1]=1.867;$OK[2][1]=5.6;$OK[3][1]=-0.7;$OK[4][1]=0.7;$OK[5][1]=0.0;
		//!
		$OK[1][2]=1.867;$OK[2][2]=0.0;$OK[3][2]=0.0;$OK[4][2]=0.0;$OK[5][2]=0.0;
		//!
		$OK[1][3]=0.0;$OK[2][3]=11.2;$OK[3][3]=-0.0;$OK[4][3]=0.0;$OK[5][3]=1.244;
		//!
		$OK[1][4]=0.0;$OK[2][4]=0.0;$OK[3][4]=0.0;$OK[4][4]=0.0;$OK[5][4]=0.0;
		//!
		$OK[1][5]=0.0;$OK[2][5]=0.0;$OK[3][5]=0.0;$OK[4][5]=0.7;$OK[5][5]=0.0;
		//!
		//!　油の燃焼計算
		//!　入力データ　POd(5),PO(5),Ff,Tf1,Fa,Ta1,OK(5,5),FaO2d,Hh
		//!　出力データ　PO(5),Hl　A0d,A0,　G0,　G0d,　FCO2,　FH2O,　FN2,FSO2,　FaN2,FaO2,FaH2O
		//!　POｄ(1)：cd
		//!　POｄ(2)：hd
		//!　POｄ(3)：od
		//!　POｄ(4)：sd
		//!　POｄ(5)：ｗ
		//!　φはFに読み替える。
		//!　Ffは　φfで燃料中の相対湿度(％)
		//!　Faは　φaで空気中の相対湿度(％)
		//!　Tf1は予熱前燃料温度
		//!　Ta1は予熱前空気温度
		//!　Pｋ(I,j)は,燃焼計算用係数
		//!　Pfは大気圧で101.325　kPa
		//!　Psfは飽和蒸気圧　MPa
		//!　Psf=10^(-0.000000000543131*Ｔ^4+0.000000360475263*Ｔ^3-0.00012264315679*Ｔ^2+0.031390372490756*Ｔ-2.2047366048003)
		//!　FaH2o：　燃焼用空気中の水蒸気分圧
		//!　FaO2d：　ドライベースの空気中酸素濃度　
		//!　FaO2 ：   燃焼用空気中の酸素濃度(分圧)WET
		//!　FaN2 ：   燃焼用空気中の窒素濃度(分圧)WET
		//!　Oｋ(i,　j)：オイル燃焼計算用係数

		//!　total：加算用パラメータ
		//!　 HL：燃料発熱量
		//!　 A0d ：ドライベースの理論空気量
		//!　 A0 ：理論空気量

		//!　 G0 ：理論湿り排ガス量
		//!　 G0D：理論乾き排ガス量
		//!　 FCO2 ：CO2生成量
		//!　 FH2O ：H2O生成量
		//!　F N2 ：N2生成量
		//!　F SO2 :　SO2生成量

		//!　 T：温度

		//!燃焼用空気
		$T = $Ta1;
		$pow4 = -0.000000000543131 * pow($T, 4);
		$pow3 = 0.000000360475263 * pow($T, 3);
		$pow2 = 0.00012264315679 * pow($T, 2);
		$pow1 = 0.031390372490756 * $T;

		$Psf = pow(10, $pow4 + $pow3 - $pow2 + $pow1 - 2.2047366048003);
		
		$Psf = $Psf*1000;     //!KPaに変換
		$Pf = 101.325;      //!kPa
		$FaH2O = $Ff * $Psf/(100*$Pf) ;//!分圧
		
		//!　ドライベ-ス,％入力
		$POD[5] = 0.0;

		$PO[5] = $POD[5]/100.0;		
		for($i=1 ; $i<=4 ; $i++){
			$PO[$i] = 0.0;
			if((1 + $PO[5])!=0){
				$PO[$i] = ($POD[$i]/100)/(1 + $PO[5]);
			}
		}
		$AA = 0.0;
		$BB = 0.0;
		$CC = 0.0;
		$DD = 0.0;
		$EE = 0.0;
		
		for($i=1 ; $i<=5 ; $i++){
			$AA = $AA + $PO[$i]*$OK[1][$i];   //!必要酸素量
			$BB = $BB + $PO[$i]*$OK[2][$i];   //!発生CO2　燃料起因
			$CC = $CC + $PO[$i]*$OK[3][$i];  //!発生H2O　燃料起因
			$DD = $DD + $PO[$i]*$OK[4][$i];   //!発生SO2　燃料起因
			$EE = $EE + $PO[$i]*$OK[5][$i];   //!発生N2　燃料起因
		}
		//! 　FaO2d 燃焼用空気中のドライベースの酸素濃度(％)
		//!　乾き理論空気量計算
		$FaO2D = $FaO2D/100;

		$FaO2 = 0.0;
		if((1.0 + $FaH2O)!=0){
			$FaO2 = $FaO2D/(1.0 + $FaH2O);
		}

		$FaN2 = 1.0 - $FaO2 - $FaH2O;

		$A0D = 0;
		if($FaO2D!=0){
			$A0D = $AA/$FaO2D;
		}
		$A0 = 0;
		if((1-$FaH2O)!=0){	
			$A0 = $A0D/(1-$FaH2O);
		}
		//!　N2発生量
		$FN2 = $EE + $A0D*(1 - $FaO2);
		//!　　
		$FCO2 = $BB;
		$FH2O = $CC + $A0 * $FaH2O;
		$FSO2 = $DD;
		$G0 = $FN2 + $FCO2 + $FH2O + $FSO2;
		$G0D = $FN2 + $FCO2 + $FSO2;
		
		if($Hh > 1000.0){
			//$Hl = ($Hh - 2502. * (8.94 * $PO[1] + $PO[5])) * 1000.;			
			$Hl = ($Hh - 2502. * (8.94 * $PO[1] + $PO[5])); // !teisei
		}else{
			//$Hl = (33.8 * $PO[1] + 122.5 * $PO[2] - 18.2 * $PO[3] + 9.42 * $PO[4] - 2.44 * $PO[5])*1000;
			$Hl = (33.8 * $PO[1] + 122.5 * $PO[2] - 18.2 * $PO[3] + 9.42 * $PO[4] - 2.44 * $PO[5]);  //!teisei
		}
	} /* END SUBROUTINE OILCOM */

	/**
	 * SUBROUTINE STEAM
	 */
	public function STEAM(&$TS, &$PS, &$DHS){
		// real,dimension(6,5)::DataS
		// real,dimension(5)::PPP
		// real,dimension(6)::TTT

		// !　水蒸気の顕熱計算　ペンデング
		// Real Ts,Ps,Dhs
		$DataS[1] = array(1=>417, 2=>502, 3=>599, 4=>601, 5=>636);
		$DataS[2] = array(1=>437, 2=>502, 3=>599, 4=>601, 5=>636);
		$DataS[3] = array(1=>457, 2=>504, 3=>599, 4=>601, 5=>636);
		$DataS[4] = array(1=>477, 2=>525, 3=>599, 4=>601, 5=>636);
		$DataS[5] = array(1=>497, 2=>545, 3=>574, 4=>601, 5=>636);
		$DataS[6] = array(1=>516, 2=>566, 3=>596, 4=>614, 5=>636);
		// data PPP /1.,2.,3.,4.,5./ //!taikiatu
		$PPP = array(1=>1.0, 2=>2.0, 3=>3.0, 4=>4.0, 5=>5.0);

		// data TTT /100.,110.,120.,130.,140.,150./  //!蒸気温度
		$TTT = array(1=>100.0, 2=>110.0, 3=>120.0, 4=>130.0, 5=>140.0, 6=>150.0);

		$PS = $PS/101.325;
	
		for($i=1 ; $i<=5 ; $i++){
			if($PS >= $PPP[$i]){ //if(PS.ge.PPP(i)) then
				$IPM = $i;
			}else{
				$IPM = 5;
			}
		}

		for($i=1; $i<=6 ; $i++){
			if($TS >= $TTT[$i]){ //if(TS.ge.TTT(i)) then
				$ITM = $i;
			}else{
				$ITM = 6;
			}
		}

		$DPS = $PPP[$IPM] - $PS;

		$DTS = $TTT[$ITM] - $TS;

		$X1 = $DPS;

		$X2 = 1 - $DPS;
		
		$Y1 = $DTS/10;

		$Y2 = 1 - $Y1;
		$C0 = $DataS[$ITM - 1][$IPM-1];		
		$C1 = $DataS[$ITM - 1][$IPM];		
		$C2 = $DataS[$ITM][$IPM-1];
		$C3 = $DataS[$ITM][$IPM];

		$DHS = $Y2*($X2*$C0 + $X1*$C1) + $Y1*($X2*$C2 + $X1*$C3);		
	} /* END SUBROUTINE STEAM */

	/**
	 * SUBROUTINE GASSH
	 * !ガス比熱
	 */
	public function GASSH(&$XX, &$T, &$CPX){
		// real,dimension(20)::XX
		// real,dimension(20,5)::GSHK
		// REAL T, CPX 
		//!IFILEから比熱計算用係数データを読む。
		//!　燃料中の組成の順番と異なる。
		//!　メインプログラムでXX(i)に分率（分圧）を代入。
		//!X(1):H2
		//!XX(2):N2
		//!XX(3):N2/Air
		//!XX(4):O2
		//!XX(5):CO
		//!XX(6):H2O
		//!XX(7):H2S
		//!XX(8):CO2
		//!XX(9):SO2
		//!XX(10):Air
		//!XX(11):CH4
		//!XX(12):C2H4
		//!XX(13):C2H6
		//!XX(14):C2H2
		//!XX(15):C3H6
		//!XX(16):C3H8
		//!XX(17):C4H8-1B
		//!XX(18):C4H8-2B
		//!XX(19):C4H10-nB
		//!XX(20):C4H10-iB
		$GSHK[1] = array(1=>1.27846565029057, 2=>0.000054738799485, 3=>-0.000000033971418, 4=>0.000000000039045, 5=>-0.0000000000000);
		$GSHK[2] = array(1=>1.30143850931556, 2=>-0.000018328068, 3=>0.000000228112138, 4=>-0.000000000137871, 5=>0.000000000000026);
		$GSHK[3] = array(1=>1.29409520045046, 2=>0.000000235373466, 3=>0.000000191079543, 4=>-0.000000000112917, 5=>0.000000000000021);
		$GSHK[4] = array(1=>1.30359913419782, 2=>0.000174719925671, 3=>0.000000076561873, 4=>-0.000000000099831, 5=>0.000000000000026);
		$GSHK[5] = array(1=>1.30159009975408, 2=>0.000008984281923, 3=>0.000000223906789, 4=>-0.000000000149829, 5=>0.000000000000031);
		$GSHK[6] = array(1=>1.42809313005685, 2=>0.000090320303168, 3=>0.000000233944149, 4=>-0.000000000127234, 5=>0.000000000000022);
		$GSHK[7] = array(1=>1.53167856201597, 2=>0.000259285487674, 3=>0.000000250608726, 4=>-0.000000000200791, 5=>0.000000000000042);
		$GSHK[8] = array(1=>1.62300542066424, 2=>0.001041469423775, 3=>-0.000000645237542, 4=>0.000000000248801, 5=>-0.000000000000041);
		$GSHK[9] = array(1=>1.77444140786548, 2=>0.000956235229503, 3=>-0.000000626570082, 4=>0.00000000022524, 5=>-0.000000000000034);
		$GSHK[10] = array(1=>1.29671014492629, 2=>0.000032755509574, 3=>0.000000171587663, 4=>-0.000000000111027, 5=>0.000000000000022);
		$GSHK[11] = array(1=>1.55120103426248, 2=>0.001072489912042, 3=>0.000000362126354, 4=>-0.000000000248903, 5=>-0.00000000000004);
		$GSHK[12] = array(1=>1.88338461538035, 2=>0.002492742812743, 3=>-0.000000990034965, 4=>0.000000000292152, 5=>-0.000000000000087);
		$GSHK[13] = array(1=>1.91271328670987, 2=>0.001840281662781, 3=>-0.00000219245338, 4=>0.000000001848291, 5=>-0.000000000000638);
		$GSHK[14] = array(1=>1.81606658048105, 2=>0.002052324072979, 3=>-0.000002565217503, 4=>0.000000002041187, 5=>-0.000000000000639);
		$GSHK[15] = array(1=>2.66600937298523, 2=>0.003896433199143, 3=>-0.000001212764809, 4=>-0.000000000155852, 5=>0.000000000000183);
		$GSHK[16] = array(1=>3.04414964447943, 2=>0.00497538407669, 3=>-0.00000159643151, 4=>-0.000000000156554, 5=>0.000000000000217);
		$GSHK[17] = array(1=>3.70522268908309, 2=>0.005757540204877, 3=>-0.000002641431852, 4=>0.000000000609146, 5=>0.000000000000023);
		$GSHK[18] = array(1=>3.71856496445457, 2=>0.005265660785273, 3=>-0.000001733270773, 4=>-0.000000000097474, 5=>0.000000000000196);
		$GSHK[19] = array(1=>4.12583128636896, 2=>0.006179750200756, 3=>-0.000001980023653, 4=>-0.000000000078123, 5=>0.000000000000197);
		$GSHK[20] = array(1=>4.00631351002755, 2=>0.006500856716789, 3=>-0.000001847388763, 4=>-0.000000000699249, 5=>0.000000000000503);

		$CPX = 0.0;
		// IF(t.le.0.0) T=1.0
		if($T <= 0.0) $T = 1.0;

		for($i=1 ; $i<=20 ; $i++){
			$CC = 0;
			for($j=1 ; $j<=5 ; $j++){
				$XJ = $j - 1;
				$CC = $CC + pow($T, $XJ) * $GSHK[$i][$j];
			}			
			$CPX = $CPX + $CC * $XX[$i];			
		}

	} /* END SUBROUTINE GASSH */

	/**
	 * SUBROUTINE MULTIFUEL
	 */
	public function MULTIFUEL(&$Eh1, &$Eh2, &$Hl1, &$Hl2, &$A01, &$A02, &$G0D1, &$G0D2, &$G01, &$G02, &$FCO21, &$FH2O1, &$FN21, &$FSO21, &$FCO22, &$FH2O2, &$FN22, &$FSO22, &$A0M, &$G0DM, &$G0M, &$FCO2M, &$FH2OM, &$FN2M, &$FSO2M){
		// real K1,K2
		$K1 = 0.0;
		$k2 = 0.0;
		// !　混合計算
		// ! 燃料１と燃料２の特性値から混合燃料の特性値を算出する。
		// !入力データ：Eh1.Eh2,Hl1,Hl2,A01,A02,G0D1,G0D2,G01,G02,　 FCO21,　FH2O1,　FN21,FSO21,FCO22,　FH2O2,　FN22,FSO22
		// !  出力データ：A0M,G0DM,G0M,FCO2M,FH2OM,FN2M,FSO2M
		// K1=EH1/(EH1+EH2)/Hl1
		
		// $K1 = 0;
		if(($Eh1 + $Eh2)!=0 && $Hl1!=0){
			$K1 = ($Eh1/($Eh1 + $Eh2))/$Hl1;
		}

		if($Hl2 <= 0) $Hl2=1.0; // if(Hl2.le.0) Hl2=1.0;

		// K2=EH2/(EH1+EH2)/Hl2
		$K2 = 0;
		if (0 != ($Eh1 + $Eh2)) {
			$K2 = ($Eh2/($Eh1 + $Eh2))/$Hl2;
		}
		
		$A0M = $A01*$K1 + $A02*$K2;
		$G0M = $G01*$K1 + $G02*$K2;
		$G0DM = $G0D1*$K1 + $G0D2*$K2;
		$FCO2M = $FCO21*$K1 + $FCO22*$K2;
		$FH2OM = $FH2O1*$K1 + $FH2O2*$K2;
		$FN2M = $FN21*$K1 + $FN22*$K2;
		$FSO2M = $FSO21*$K1 + $FSO22*$K2;
	} /* END SUBROUTINE MULTIFUEL */

	/**
	 * SUBROUTINE AIRRATIO
	 */
	public function AIRRATIO(&$Fg_O2, &$Fa_O2, &$Fa_H2O, &$G0D, &$A0, &$M){
		// Real M
		$M = 0.0;
		// !空気比の計算
		// ! 入力データ　FgO2,　FaO2,　FaH2O,　G0D,　A0
		// print *, "Fg_O2,Fa_O2,Fa_H2O,G0D,A0,M=",Fg_O2,Fa_O2,Fa_H2O,G0D,A0,M
		// !  出力データ　M
		
		$tmp = $Fa_O2 - $Fg_O2*(1.0 - $Fa_H2O);
		if($tmp!=0 && $A0 !=0){
			$M = 1 + (($Fg_O2/$tmp)*$G0D)/$A0;
		}
		// print *, "m,Fg_O2,Fa_O2,Fa_H2O=",m,Fg_O2,Fa_O2,Fa_H2O
	}/* END SUBROUTINE AIRRATIO */

	/**
	 * SUBROUTINE INFILT
	 */
	public function INFILT(&$Vme, &$A, &$Vinfilt){
		// !　侵入空気量の計算
		if($Vme > 0.0) // IF(Vme.GT.0.0) Then
			$Vinfilt = $A - $Vme;
		else
			$Vinfilt = 0.0;
		
		if($Vinfilt < 0.0) $Vinfilt=0.0; // IF(Vinfilt.LT.0.0) Vinfilt=0.0
	}/* END SUBROUTINE INFILT */

	/**
	 * SUBROUTINE SH_SOLID
	 */
	public function SH_SOLID(&$PRODATA, &$ICODET, &$T, &$CPX){
		// !real,dimension(50,20)::DATA
		// real,dimension(50,10):: PRODATA
		// real,dimension(10)::T1
		// real,dimension(10)::T2
		// real,dimension(10,5)::XK1
		// real,dimension(10,5)::XK2
		$T1 = array(1=>700, 2=>700, 3=>700, 4=>700, 5=>700, 6=>650, 7=>700, 8=>700, 9=>700, 10=>700);
		$T2 = array(1=>750, 2=>750, 3=>750, 4=>750, 5=>750, 6=>750, 7=>700, 8=>750, 9=>701.1, 10=>750);

		$XK1[1] = array(1=>6.478E-11, 2=>-2.6703E-08, 3=>3.95016E-05, 4=>0.110717297, 5=>-0.019745442);
		$XK1[2] = array(1=>6.769E-11, 2=>-3.79642E-08, 3=>4.62006E-05, 4=>0.109925173, 5=>-0.009193326);
		$XK1[3] = array(1=>4.694E-11, 2=>-1.15414E-08, 3=>3.66702E-05, 4=>0.110790022, 5=>-0.017113863);
		$XK1[4] = array(1=>1.3751E-10, 2=>-1.46417E-07, 3=>9.58492E-05, 4=>0.101973244, 5=>-0.002579979);
		$XK1[5] = array(1=>1.643E-11, 2=>-9.14592E-09, 3=>4.9736E-05, 4=>0.109206207, 5=>-0.089817681);
		$XK1[6] = array(1=>4.243E-11, 2=>-4.14408E-09, 3=>3.27382E-05, 4=>0.109352006, 5=>-0.027915377);
		$XK1[7] = array(1=>8.302E-11, 2=>-4.92047E-08, 3=>4.66404E-05, 4=>0.110062771, 5=>-0.012289916);
		$XK1[8] = array(1=>4.73E-11, 2=>-1.55726E-08, 3=>3.91759E-05, 4=>0.108773548, 5=>-0.023675611);
		$XK1[9] = array(1=>4.49E-12, 2=>2.19547E-08, 3=>4.61328E-05, 4=>0.112695994, 5=>0.205697272);
		$XK1[10] = array(1=>5.419E-11, 2=>-1.92384E-08, 3=>4.88157E-05, 4=>0.105469919, 5=>-0.094676643);

		$XK2[1] = array(1=>-2.04E-10, 2=>9.84057E-07, 3=>-0.001768293, 4=>1.560835682, 5=>-410.3485751);
		$XK2[2] = array(1=>-3.07E-10, 2=>1.48295E-06, 3=>-0.002654513, 4=>2.245310921, 5=>-602.8753267);
		$XK2[3] = array(1=>-3.17E-10, 2=>1.48814E-06, 3=>-0.002578765, 4=>2.109791321, 5=>-539.09403);
		$XK2[4] = array(1=>-2.37E-10, 2=>1.10072E-06, 3=>-0.001870756, 4=>1.533790159, 5=>-363.7071382);
		$XK2[5] = array(1=>-7.62E-11, 2=>3.34886E-07, 3=>-0.000529362, 4=>0.51101305, 5=>-76.44129395);
		$XK2[6] = array(1=>-2.04E-10, 2=>9.27958E-07, 3=>-0.00154222, 4=>1.256816009, 5=>-282.634313);
		$XK2[7] = array(1=>-1.64E-10, 2=>7.54385E-07, 3=>-0.001277164, 4=>1.094930432, 5=>-247.3080639);
		$XK2[8] = array(1=>-2.66E-10, 2=>1.22527E-06, 3=>-0.00207306, 4=>1.675010565, 5=>-401.7162037);
		$XK2[9] = array(1=>4.49E-12, 2=>2.19547E-08, 3=>4.61328E-05, 4=>0.112695994, 5=>0.205697272);
		$XK2[10] = array(1=>-1.01E-10, 2=>4.85467E-07, 3=>-0.000869281, 4=>0.840652246, 5=>-199.8656638);
		
		// !固体の比熱計算サブプログラムの検討

		// !　IFILE：ファイルの指定コード,ICODE：物質の指定コード
		// !　T：　比熱を計算する温度
		// !　T1(i):　i 物質の低温側遷移温度　iFiLEに格納
		// !　T2(i)：　i 物質の高温側遷移温度　iFiLEに格納
		// !　H：エンタルピ
		// !　XK1(i,J)：低温側エンタルピ計算用係数,iFiLEに格納
		// !　XK2(i,J):　高温側エンタルピ計算用係数,iFiLEに格納
		// !　CPX:平均比熱
		$ICODE = $ICODET;
		if($ICODE <= 10.0) { //iF(ICODE.le.10.) then
			// !　READ *,T1,T2 // !　iFiLEから入力
			// !　READ *,XK1,XK2 // !　iFiLEから入力
			$i = $ICODE;
			$T1X = $T1[$i];
			$T2X = $T2[$i];
			
			if($T <= $T1X){// iF(T.LE.T1X) GO TO 100
				// 100 continue
				$H = 0.0;				
				for($j=1 ; $j<=5 ; $j++){
					$H = $H + pow($T,5-$j)*$XK1[$i][$j];
				}	

				// GO TO 300
			}else if($T >= $T2X){ // iF(T.GE.T2X) GO TO 200
				// 200 H=0.
				$H = 0.0;
				for($j=1 ; $j<=5 ; $j++){
					$H = $H + pow($T,5-$j)*$XK2[$i][$j];
				}
			}else{
				$H = 0;
				for($j=1 ; $j<=5 ; $j++){
					$H = $H + pow($T1[$i],5-$j)*$XK1[$i][$j];
				}

				$H1 = $H;
				$H = 0;
				
				for($j=1 ; $j<=5 ; $j++){
					$H = $H + pow($T2[$i],5-$j)*$XK2[$i][$j];
				}

				$H2 = $H;
				// !　補間計算
				$DT = $T - $T1X;
				$DH12 = $H2 - $H1;
				$DT12 = $T2X - $T1X;
				
				// $H = 0.0;
				if($DT12!=0) {
					$H = $H1 + $DH12*$DT/$DT12;
				}
				// GO TO 300
			}			
			
			// 300 continue
			$CPX = 0.0;
			if($T!=0){
				$CPX = $H/$T;
			}
		}else{
		// !　DATA(i,J),J=3　に平均比熱を入れた場合
			$CPX = $PRODATA[$ICODE][3];
		}	
	} /* END SUBROUTINE SH_SOLID */

	/**
	 * SUBROUTINE QL_OPEN
	 */							
	public function QL_OPEN(&$ICODE, &$D, &$L, &$TP, &$Sopening, &$TZ, &$TA, &$Elopening){
		// real L
		// real,dimension(4,5)::XK
		// !　開口部損失の計算サブプログラムの検討
		// !　IFILE：ファイルの指定コード,ICODE：開口部形状指定コード
		// !　D：　
		// !　L：壁厚み
		// !　TP：　１トンの被熱物処理時間
		// !　Sopenimg：開口部面積
		// !　TZ：炉内温度
		// !　TA：大気温度
		// !　 XK(I,　j)：形態係数を計算する式の係数
		// !　Elopening：開口部損失
		$XK[1] = array(1=>-0.705995455, 2=>-3.251539558, 3=>0.455060296, 4=>-0.086482551, 5=>0.005000143);
		$XK[2] = array(1=>-0.752839804, 2=>-3.614574755, 3=>0.647009401, 4=>-0.174782406, 5=>0.015933798);
		$XK[3] = array(1=>-0.693014643, 2=>-4.711233042, 3=>0.829916297, 4=>-0.204277674, 5=>0.017187526);
		$XK[4] = array(1=>-0.859476121, 2=>-6.230872726, 3=>1.025909964, 4=>-0.260659293, 5=>0.018579824);
		// !READ XK // !　IFILEから入力,J1からJ2の指定用
		$i = $ICODE;
		$X = 0.0;
		if($L!=0){
			$X = $D/$L; // !teisei
		}
		$F = 0;
		for($j=1 ; $j<=5 ; $j++){
			$F = $F + pow($X,($j-1))*$XK[$i][$j];
		}

		// $F = 0;
		if($F!=0){
			$F = 1/$F;
		}
		$FAI = pow(10, $F);
		// print *, " FAI=",FAI
		$Elopening = $Sopening*$TP*20.412E-8*$FAI*(pow($TZ+273.15, 4) - pow($TA+273.15, 4));
	} // END SUBROUTINE QL_OPEN 

	/**
	 * SUBROUTINE CHIKUNETU
	 */					     
	public function CHIKUNETU(&$TZ, &$TA, &$LW1, &$LW2, &$LW3, &$LW4, &$IWALL, &$HWALL){
		// !Ｔｚ：炉内温度：壁内面温度であると仮定
		// !Ｔａ：壁外面温
		// ! Taikabutu ( I,j) : 耐火物の物性表、Ｉ；耐火物の指定コード、ｊ：物性指定；１：嵩比重、２：熱伝導率(500℃)、
		// !                                    ３：熱伝導率(1000℃、）、４：比熱
		// Real  $LW1, $LW2, $LW3, $LW4
		// Real LBK(4)
		// REAL Lw(4),T(4)
		// real,dimension(16,4)::taikadata
		// integer, dimension(4):: $IWALL

		$TAIKADATA[1] = array(1=>3.600, 2=>2.600, 3=>2.300, 4=>0.691);
		$TAIKADATA[2] = array(1=>3.530, 2=>3.400, 3=>3.400, 4=>1.109);
		$TAIKADATA[3] = array(1=>3.300, 2=>3.300, 3=>3.300, 4=>0.992);
		$TAIKADATA[4] = array(1=>3.150, 2=>3.300, 3=>2.30, 4=>1.026);
		$TAIKADATA[5] = array(1=>3.146, 2=>84.40, 3=>65.00, 4=>0.967);
		$TAIKADATA[6] = array(1=>2.720, 2=>2.210, 3=>2.093, 4=>1.026);
		$TAIKADATA[7] = array(1=>2.250, 2=>0.770, 3=>0.960, 4=>1.000);
		$TAIKADATA[8] = array(1=>2.200, 2=>1.500, 3=>1.400, 4=>1.000);
		$TAIKADATA[9] = array(1=>2.100, 2=>1.500, 3=>1.400, 4=>0.970);
		$TAIKADATA[10] = array(1=>1.83, 2=>0.605, 3=>0.884, 4=>0.954);
		$TAIKADATA[11] = array(1=>0.800, 2=>0.284, 3=>0.400, 4=>1.200);
		$TAIKADATA[12] = array(1=>0.800, 2=>0.120, 3=>0.170, 4=>1.100);
		$TAIKADATA[13] = array(1=>0.540, 2=>0.190, 3=>0.19, 4=>1.026);
		$TAIKADATA[14] = array(1=>0.160, 2=>0.103, 3=>0.103, 4=>1.000);
		$TAIKADATA[15] = array(1=>0.140, 2=>0.108, 3=>0.308, 4=>0.960);
		$TAIKADATA[16] = array(1=>0.100, 2=>0.163, 3=>0.426, 4=>0.950);

		$LW[1] = $LW1;
		$LW[2] = $LW2;
		$LW[3] = $LW3;
		$LW[4] = $LW4;
		
		$RK = 0.0;
		$TX = ($TZ + $TA)/2;
		for($i=1 ; $i<=4 ; $i++) {	
			if($TX <= 750){ 
				$j = 2;
			}else{
				$j = 3;
			}	
			
			if($IWALL[$i]==0){
				$RAMUDA = 0;
			}else{
				$RAMUDA = $TAIKADATA[$IWALL[$i]][$j];
			}
			
			if($LW[$i] <= 0.0){// If (LW(i) .le. 0.) then
				$RAMUDA = 1.0;
			}else{				
				if($RAMUDA!=0){
					$RK = $RK + $LW[$i]/$RAMUDA;
				}
			}
			$LBK[$i] = 0.0;
			if($RAMUDA!=0){
				$LBK[$i] = $LW[$i]/$RAMUDA;
			}
		}
		
		$Q = 0.0;
		if($RK!=0){
			$Q = ($TZ - $TA)/$RK;
		}

		$T12 = $TZ - $LBK[1]*$Q;	

		$T23 = $T12 - $LBK[2]*$Q ;	

		$T34 = $T23 - $LBK[3]*$Q ;	

		$T[1] = ($TZ + $T12)*0.5;	

		$T[2] = ($T12 + $T23)*0.5;	

		$T[3] = ($T23 + $T34)*0.5;	

		$T[4] = ($T34 + $TA)*0.5;	

		$HWALL = 0.0;
		for($i=1 ; $i<=4 ; $i++){ 
			$HWALL= $HWALL + $T[$i]*$TAIKADATA[$IWALL[$i]][1]*$TAIKADATA[$IWALL[$i]][4]*$LW[$i];
		}	

		$HWALL= $HWALL*1000;	
	} // END SUBROUTINE CHIKUNETU 


	/**
	 * SUBROUTINE HOUEN
	 */				     
	public function HOUEN(&$LW, &$DE, &$AOPENING){
		// !放炎損失
		// Real $LW,$DE,$AOPENING
		$X = 0.0;
		if($DE!=0){
			$X = $LW / $DE;
		}

		if($X <= 0.5){
			$AOPENING = 0.38;
		}else{
			if ($X <= 3 ){
				$AOPENING = 0.38 + ((0.67 - 0.38)/2.5)*($X - 0.5);
			}else{
				$AOPENING = 0.67;
			}
		}
	} // END SUBROUTINE HOUEN 
	
}